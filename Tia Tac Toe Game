import { useState, useEffect } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"

const TicTacToe = () => {
  const [board, setBoard] = useState<Array<string | null>>(Array(9).fill(null))
  const [isXNext, setIsXNext] = useState(true)
  const [winner, setWinner] = useState<string | null>(null)
  const [isComputerTurn, setIsComputerTurn] = useState(false)

  useEffect(() => {
    if (isComputerTurn && !winner && !board.every(cell => cell)) {
      const availableMoves = board.map((cell, index) => (cell === null ? index : null)).filter(index => index !== null) as number[]
      const randomMove = availableMoves[Math.floor(Math.random() * availableMoves.length)]
      handleClick(randomMove)
      setIsComputerTurn(false)
    }
  }, [isComputerTurn, board, winner])

  const handleClick = (index: number) => {
    if (winner || board[index]) {
      return
    }

    const newBoard = board.slice()
    newBoard[index] = isXNext ? 'X' : 'O'
    setBoard(newBoard)
    setIsXNext(!isXNext)

    const newWinner = calculateWinner(newBoard)
    setWinner(newWinner)

    if (!newWinner && !newBoard.every(cell => cell)) {
      setIsComputerTurn(true)
    }
  }

  const calculateWinner = (squares: Array<string | null>): string | null => {
    const lines = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6],
    ]

    for (let i = 0; i < lines.length; i++) {
      const [a, b, c] = lines[i]
      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
        return squares[a]
      }
    }

    return null
  }

  const resetGame = () => {
    setBoard(Array(9).fill(null))
    setIsXNext(true)
    setWinner(null)
    setIsComputerTurn(false)
  }

  const renderSquare = (index: number) => (
    <button
      className="w-20 h-20 border border-gray-300 flex items-center justify-center text-3xl font-bold"
      onClick={() => handleClick(index)}
    >
      {board[index]}
    </button>
  )

  const status = winner
    ? `Winner: ${winner}`
    : `Next player: ${isXNext ? 'X' : 'O'}`

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">Tic Tac Toe</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-3 gap-1">
          {board.map((_, index) => (
            <div key={index}>{renderSquare(index)}</div>
          ))}
        </div>
        <div className="mt-4">
          <div className="text-center mb-2">{status}</div>
          <Button onClick={resetGame} variant="secondary">
            Reset Game
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

export default TicTacToe
